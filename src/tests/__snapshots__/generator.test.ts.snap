// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Anonymous Types 1`] = `
"import axios, { AxiosRequestConfig, AxiosError } from 'axios';

import { RequestOptions, SdkOptions } from './options';
import { SdkRequester } from './requester';
import * as types from './types';

export function createSdkClient(options: SdkOptions) {
  const requester = new SdkRequester(options);
  return {
    setAuthToken(authToken: string | undefined | null) {
      requester.setAuthToken(authToken);
    },
    setErrorHandler(handler: (error: AxiosError) => void) {
      requester.setErrorHandler(handler);
    },
    setInterceptors(
      interceptors: Parameters<typeof requester.setInterceptors>[0],
    ) {
      requester.setInterceptors(interceptors);
    },
    get(path: string, query?: object, requestOptions?: RequestOptions) {
      return requester.get(path, query, requestOptions);
    },
    post(path: string, data?: object, requestOptions?: RequestOptions) {
      return requester.post(path, data, requestOptions);
    },
    put(path: string, data?: object, requestOptions?: RequestOptions) {
      return requester.put(path, data, requestOptions);
    },
    patch(path: string, data?: object, requestOptions?: RequestOptions) {
      return requester.patch(path, data, requestOptions);
    },
    delete(path: string, data?: object, requestOptions?: RequestOptions) {
      return requester.delete(path, data, requestOptions);
    },
    request(options: AxiosRequestConfig) {
      return requester.request(options);
    },
    billing: {
      invoices: {
        id: (id: number | string) => ({
          get(
            query?: any,
            requestOptions?: RequestOptions,
          ): Promise<types.AgGetBillingInvoicesByIdResponse> {
            return requester.get(
              \`/billing/invoices/\${id}\`,
              query,
              requestOptions,
            );
          },
        }),
      },
    },
    companies: {
      post(
        data: types.AgPostCompaniesRequest,
        requestOptions?: RequestOptions,
      ): Promise<types.AgPostCompaniesResponse> {
        return requester.post(\`/companies\`, data, requestOptions);
      },
    },
  };
}

export type SdkClient = ReturnType<typeof createSdkClient>;

export const CancelToken = axios.CancelToken;
export const isCancel = axios.isCancel;
"
`;

exports[`Anonymous Types 2`] = `
"export interface AgGetBillingInvoicesByIdResponse {
  invoice: {
    id: number;
  };
}
export interface AgGetBillingInvoicesResponse {
  invoices: {
    id: number;
  }[];
}
export interface AgPostCompaniesRequest {
  company: CompanyNew;
}
export interface AgPostCompaniesResponse {
  company: Company;
}
export interface Company {
  id: number;
  name: string;
  size: number;
}
export interface CompanyNew {
  name: string;
  size: number;
}
"
`;

exports[`Basic Scenario 1`] = `
"import axios, { AxiosRequestConfig, AxiosError } from 'axios';

import { RequestOptions, SdkOptions } from './options';
import { SdkRequester } from './requester';
import * as types from './types';

export function createSdkClient(options: SdkOptions) {
  const requester = new SdkRequester(options);
  return {
    setAuthToken(authToken: string | undefined | null) {
      requester.setAuthToken(authToken);
    },
    setErrorHandler(handler: (error: AxiosError) => void) {
      requester.setErrorHandler(handler);
    },
    setInterceptors(
      interceptors: Parameters<typeof requester.setInterceptors>[0],
    ) {
      requester.setInterceptors(interceptors);
    },
    get(path: string, query?: object, requestOptions?: RequestOptions) {
      return requester.get(path, query, requestOptions);
    },
    post(path: string, data?: object, requestOptions?: RequestOptions) {
      return requester.post(path, data, requestOptions);
    },
    put(path: string, data?: object, requestOptions?: RequestOptions) {
      return requester.put(path, data, requestOptions);
    },
    patch(path: string, data?: object, requestOptions?: RequestOptions) {
      return requester.patch(path, data, requestOptions);
    },
    delete(path: string, data?: object, requestOptions?: RequestOptions) {
      return requester.delete(path, data, requestOptions);
    },
    request(options: AxiosRequestConfig) {
      return requester.request(options);
    },
    companies: {
      id: (id: number | string) => ({
        archive: {
          post(
            data: any = {},
            requestOptions?: RequestOptions,
          ): Promise<types.SuccessResponse> {
            return requester.post(
              \`/companies/\${id}/archive\`,
              data,
              requestOptions,
            );
          },
        },
        get(
          query?: any,
          requestOptions?: RequestOptions,
        ): Promise<types.CompanyResponse> {
          return requester.get(\`/companies/\${id}\`, query, requestOptions);
        },
        patch(
          data: types.CompanyUpdateRequest,
          requestOptions?: RequestOptions,
        ): Promise<types.CompanyResponse> {
          return requester.patch(\`/companies/\${id}\`, data, requestOptions);
        },
        delete(
          data: any = {},
          requestOptions?: RequestOptions,
        ): Promise<types.SuccessResponse> {
          return requester.delete(\`/companies/\${id}\`, data, requestOptions);
        },
      }),
      get(
        query?: types.CompanyQuery,
        requestOptions?: RequestOptions,
      ): Promise<types.CompaniesResponse> {
        return requester.get(\`/companies\`, query, requestOptions);
      },
      post(
        data: types.CompanyNewRequest,
        requestOptions?: RequestOptions,
      ): Promise<types.CompanyResponse> {
        return requester.post(\`/companies\`, data, requestOptions);
      },
    },
  };
}

export type SdkClient = ReturnType<typeof createSdkClient>;

export const CancelToken = axios.CancelToken;
export const isCancel = axios.isCancel;
"
`;

exports[`Basic Scenario 2`] = `
"export interface CompaniesResponse {
  companies: Company[];
  totalCount: number;
}
export interface Company {
  id: number;
  name: string;
  size: number;
}
export interface CompanyNew {
  name: string;
  size: number;
}
export interface CompanyNewRequest {
  company: CompanyNew;
}
export interface CompanyQuery {
  page?: number;
  perPage?: number;
}
export interface CompanyResponse {
  company: Company;
}
export interface CompanyUpdate {
  name?: string;
  size?: number;
}
export interface CompanyUpdateRequest {
  company: CompanyUpdate;
}
export interface SuccessResponse {
  success: boolean;
}
"
`;

exports[`Basic Scenario 3`] = `
"export const schemas = {
  SuccessResponse: {} as any,
  Company: {} as any,
  CompanyNew: {} as any,
  CompanyUpdate: {} as any,
  CompanyQuery: {} as any,
  CompaniesResponse: {} as any,
  CompanyResponse: {} as any,
  CompanyNewRequest: {} as any,
  CompanyUpdateRequest: {} as any,
};

schemas.SuccessResponse = Object.assign(schemas.SuccessResponse, {
  type: 'object',
  properties: { success: { type: 'boolean' } },
  required: ['success'],
});

schemas.Company = Object.assign(schemas.Company, {
  type: 'object',
  properties: {
    id: { type: 'integer' },
    name: { type: 'string' },
    size: { type: 'integer' },
  },
  required: ['id', 'name', 'size'],
});

schemas.CompanyNew = Object.assign(schemas.CompanyNew, {
  type: 'object',
  properties: { name: { type: 'string' }, size: { type: 'integer' } },
  required: ['name', 'size'],
});

schemas.CompanyUpdate = Object.assign(schemas.CompanyUpdate, {
  type: 'object',
  properties: { name: { type: 'string' }, size: { type: 'integer' } },
});

schemas.CompanyQuery = Object.assign(schemas.CompanyQuery, {
  type: 'object',
  properties: { page: { type: 'integer' }, perPage: { type: 'integer' } },
});

schemas.CompaniesResponse = Object.assign(schemas.CompaniesResponse, {
  type: 'object',
  properties: {
    companies: { type: 'array', items: schemas.Company },
    totalCount: { type: 'integer' },
  },
  required: ['companies', 'totalCount'],
});

schemas.CompanyResponse = Object.assign(schemas.CompanyResponse, {
  type: 'object',
  properties: { company: schemas.Company },
  required: ['company'],
});

schemas.CompanyNewRequest = Object.assign(schemas.CompanyNewRequest, {
  type: 'object',
  properties: { company: schemas.CompanyNew },
  required: ['company'],
});

schemas.CompanyUpdateRequest = Object.assign(schemas.CompanyUpdateRequest, {
  type: 'object',
  properties: { company: schemas.CompanyUpdate },
  required: ['company'],
});

Object.keys(schemas).forEach((name) => {
  schemas[name as keyof typeof schemas].$id = 'default_' + name;
});
"
`;

exports[`Dashes and Underscores 1`] = `
"import axios, { AxiosRequestConfig, AxiosError } from 'axios';

import { RequestOptions, SdkOptions } from './options';
import { SdkRequester } from './requester';
import * as types from './types';

export function createSdkClient(options: SdkOptions) {
  const requester = new SdkRequester(options);
  return {
    setAuthToken(authToken: string | undefined | null) {
      requester.setAuthToken(authToken);
    },
    setErrorHandler(handler: (error: AxiosError) => void) {
      requester.setErrorHandler(handler);
    },
    setInterceptors(
      interceptors: Parameters<typeof requester.setInterceptors>[0],
    ) {
      requester.setInterceptors(interceptors);
    },
    get(path: string, query?: object, requestOptions?: RequestOptions) {
      return requester.get(path, query, requestOptions);
    },
    post(path: string, data?: object, requestOptions?: RequestOptions) {
      return requester.post(path, data, requestOptions);
    },
    put(path: string, data?: object, requestOptions?: RequestOptions) {
      return requester.put(path, data, requestOptions);
    },
    patch(path: string, data?: object, requestOptions?: RequestOptions) {
      return requester.patch(path, data, requestOptions);
    },
    delete(path: string, data?: object, requestOptions?: RequestOptions) {
      return requester.delete(path, data, requestOptions);
    },
    request(options: AxiosRequestConfig) {
      return requester.request(options);
    },
    user_roles: {
      role_id: (role_id: number | string) => ({
        get(
          query?: any,
          requestOptions?: RequestOptions,
        ): Promise<types.AgGetUserRolesByRoleIdResponse> {
          return requester.get(\`/user-roles/\${role_id}\`, query, requestOptions);
        },
      }),
    },
  };
}

export type SdkClient = ReturnType<typeof createSdkClient>;

export const CancelToken = axios.CancelToken;
export const isCancel = axios.isCancel;
"
`;

exports[`Dashes and Underscores 2`] = `
"export interface AgGetUserRolesByRoleIdResponse {
  user_role: UserRole;
}
export interface UserRole {
  id: number;
  name: string;
}
"
`;

exports[`Enums 1`] = `
"export enum BankAccountStatus {
  active = 'ACTIVE',
  archived = 'ARCHIVED',
  empty = '',
}
export enum CompanyDealStatus {
  new = 'new',
  won = 'won',
  lost = 'lost',
  lostClient = 'lostClient',
  test = 'test',
  junk = 'junk',
}
export enum CompanyType {
  branchOfficeSingapore = 'Branch Office Singapore',
  exemptPrivateCompanyLimitedBySharesPteLtd = 'Exempt Private Company Limited by Shares (Pte. Ltd.)',
  privateLimitedCompanyUseOfLimitedExemption = \\"Private Limited Company, use of 'Limited' exemption\\",
}
export type CompanyTypeWithSimilarValues =
  | 'Public limited company'
  | 'Public Limited Company';
export enum ProcessDefinitionKey {
  csIncorporation = 'cs-incorporation',
  csIncorporationPteLtdLocal = 'cs-incorporation-pte-ltd-local',
  csAppointmentOfNewSecretary = 'cs-appointment-of-new-secretary',
}
"
`;

exports[`OpenAPI V3 Basic Scenario 1`] = `
"import axios, { AxiosRequestConfig, AxiosError } from 'axios';

import { RequestOptions, SdkOptions } from './options';
import { SdkRequester } from './requester';
import * as types from './types';

export function createSdkClient(options: SdkOptions) {
  const requester = new SdkRequester(options);
  return {
    setAuthToken(authToken: string | undefined | null) {
      requester.setAuthToken(authToken);
    },
    setErrorHandler(handler: (error: AxiosError) => void) {
      requester.setErrorHandler(handler);
    },
    setInterceptors(
      interceptors: Parameters<typeof requester.setInterceptors>[0],
    ) {
      requester.setInterceptors(interceptors);
    },
    get(path: string, query?: object, requestOptions?: RequestOptions) {
      return requester.get(path, query, requestOptions);
    },
    post(path: string, data?: object, requestOptions?: RequestOptions) {
      return requester.post(path, data, requestOptions);
    },
    put(path: string, data?: object, requestOptions?: RequestOptions) {
      return requester.put(path, data, requestOptions);
    },
    patch(path: string, data?: object, requestOptions?: RequestOptions) {
      return requester.patch(path, data, requestOptions);
    },
    delete(path: string, data?: object, requestOptions?: RequestOptions) {
      return requester.delete(path, data, requestOptions);
    },
    request(options: AxiosRequestConfig) {
      return requester.request(options);
    },
    pets: {
      id: (id: number | string) => ({
        get(query?: any, requestOptions?: RequestOptions): Promise<any> {
          return requester.get(\`/pets/\${id}\`, query, requestOptions);
        },
        delete(data: any = {}, requestOptions?: RequestOptions): Promise<any> {
          return requester.delete(\`/pets/\${id}\`, data, requestOptions);
        },
      }),
      get(query?: any, requestOptions?: RequestOptions): Promise<any> {
        return requester.get(\`/pets\`, query, requestOptions);
      },
      post(data: any = {}, requestOptions?: RequestOptions): Promise<any> {
        return requester.post(\`/pets\`, data, requestOptions);
      },
    },
  };
}

export type SdkClient = ReturnType<typeof createSdkClient>;

export const CancelToken = axios.CancelToken;
export const isCancel = axios.isCancel;
"
`;

exports[`OpenAPI V3 Basic Scenario 2`] = `
"export interface Error {
  code: number /* int32 */ | string;
  message: string;
}
export interface NewPet {
  name: string;
  tag?: string;
}
export interface PetWithAllOf {
  name: string;
  tag?: string;
  id: number; // int64
}
export type PetWithAnyOf =
  | NewPet
  | {
      id: number; // int64
    };
export type PetWithOneOf =
  | NewPet
  | {
      id: number; // int64
    };
"
`;

exports[`OpenAPI V3 Basic Scenario 3`] = `
"export const schemas = {
  PetWithAnyOf: {} as any,
  PetWithOneOf: {} as any,
  PetWithAllOf: {} as any,
  NewPet: {} as any,
  Error: {} as any,
};

schemas.PetWithAnyOf = Object.assign(schemas.PetWithAnyOf, {
  anyOf: [
    schemas.NewPet,
    {
      type: 'object',
      required: ['id'],
      properties: { id: { type: 'integer', format: 'int64' } },
    },
  ],
});

schemas.PetWithOneOf = Object.assign(schemas.PetWithOneOf, {
  oneOf: [
    schemas.NewPet,
    {
      type: 'object',
      required: ['id'],
      properties: { id: { type: 'integer', format: 'int64' } },
    },
  ],
});

schemas.PetWithAllOf = Object.assign(schemas.PetWithAllOf, {
  allOf: [
    schemas.NewPet,
    {
      type: 'object',
      required: ['id'],
      properties: { id: { type: 'integer', format: 'int64' } },
    },
  ],
});

schemas.NewPet = Object.assign(schemas.NewPet, {
  type: 'object',
  required: ['name'],
  properties: { name: { type: 'string' }, tag: { type: 'string' } },
});

schemas.Error = Object.assign(schemas.Error, {
  type: 'object',
  required: ['code', 'message'],
  properties: {
    code: { anyOf: [{ type: 'integer', format: 'int32' }, { type: 'string' }] },
    message: { type: 'string' },
  },
});

Object.keys(schemas).forEach((name) => {
  schemas[name as keyof typeof schemas].$id = 'default_' + name;
});
"
`;

exports[`Schema Prefix 1`] = `
"export const schemas = {
  User: {} as any,
  AgGetUsersByIdResponse: {} as any,
};

schemas.User = Object.assign(schemas.User, {
  type: 'object',
  properties: { id: { type: 'integer' }, name: { type: 'string' } },
  required: ['id', 'name'],
});

schemas.AgGetUsersByIdResponse = Object.assign(schemas.AgGetUsersByIdResponse, {
  type: 'object',
  properties: { user: schemas.User },
  required: ['user'],
});

Object.keys(schemas).forEach((name) => {
  schemas[name as keyof typeof schemas].$id = 'myFancyPrefix_' + name;
});
"
`;

exports[`Typed Schemas 1`] = `
"import { JSONSchema6 } from 'json-schema';
import * as types from './types';
export interface SdkSchema<T> extends JSONSchema6 {
  _type?: T;
}
export const schemas = {
  User: {} as SdkSchema<types.User>,
  AgGetUsersByIdResponse: {} as SdkSchema<types.AgGetUsersByIdResponse>,
};

schemas.User = Object.assign(schemas.User, {
  type: 'object',
  properties: { id: { type: 'integer' }, name: { type: 'string' } },
  required: ['id', 'name'],
});

schemas.AgGetUsersByIdResponse = Object.assign(schemas.AgGetUsersByIdResponse, {
  type: 'object',
  properties: { user: schemas.User },
  required: ['user'],
});

Object.keys(schemas).forEach((name) => {
  schemas[name as keyof typeof schemas].$id = 'default_' + name;
});
"
`;
